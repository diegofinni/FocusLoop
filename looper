#!/usr/bin/env python3

from spotipy.oauth2 import SpotifyOAuth
import spotipy
import os
import time
import pprint

def main():    
    os.system("clear")
    Looper().start()


class Looper:

    MAX_QUERY = 5
    MAX_WIDTH = 27

    def __init__(self):
        self.spotifyClient = self.initSpotify()
        inputs = self.getUserInput()
        self.track = inputs[0]
        self.startTime = inputs[1]
        self.loopTime = inputs[2]

    def initSpotify(self):
        scope = "user-read-playback-state,user-modify-playback-state"
        return spotipy.Spotify(client_credentials_manager=
                               SpotifyOAuth(scope=scope))

    def getUserInput(self):
        track = self.getChosenTrack()
        maxTime = int(track["duration_ms"]) / 1000
        
        startTime = -1
        while startTime < 0 or startTime > maxTime:
            startTime = int(input("Enter valid loop start time: "))
        
        endTime = -1
        while endTime < 0 or endTime > maxTime:
            endTime = int(input("Enter valid loop end time: "))
        
        if endTime > startTime:
            loopTime = endTime - startTime
        else:
            loopTime = maxTime - startTime + endTime
        return track, startTime, loopTime

    def getChosenTrack(self):
        while True:
            trackQuery = input("Enter song name: ")
            queryResult = self.spotifyClient.search(q=trackQuery,
                                                    limit=self.MAX_QUERY,
                                                    type="track")
            trackChoices = queryResult["tracks"]["items"]
            self.printTrackChoices(trackChoices)
            choice = input("Enter desired track number: ")
            if self.isValidChoice(choice, trackChoices):
                return trackChoices[int(choice) - 1]
            else:
                os.system("clear")

    def isValidChoice(self, choice, trackChoices):
        if not choice.isdigit():
            return False
        choice = int(choice)
        if choice < 1 or choice > len(trackChoices):
            return False
        return True

    def printTrackChoices(self, trackChoices):
        print("\n#  %-30s %-30s %-30s" % ("Track", "Artist", "Album")) 
        for i in range(len(trackChoices)):
            trackData = trackChoices[i]
            track = trackData["name"][:self.MAX_WIDTH]
            album = trackData["album"]["name"][:self.MAX_WIDTH]
            artist = trackData["artists"][0]["name"][:self.MAX_WIDTH]
            print("%d. %-30s %-30s %-30s" % (i + 1, track, artist, album))
        print("")

    def start(self):
        print("\nFocusLoop starting, enjoy!\n")

        songURI = self.track["uri"]
        self.spotifyClient.start_playback(
                uris=[songURI],
                position_ms=self.startTime * 1000
        )
        self.spotifyClient.repeat(songURI)
        exit(1)
        while True:
            time.sleep(self.loopTime)
            print("Loop!")
            self.spotifyClient.seek_track(self.startTime * 1000)


if __name__ == "__main__":
    main()

